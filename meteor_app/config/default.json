// Default configuration file
{
  // Parameters pertaining to the Catenis application
  "application": {
    "appName": "Catenis",
    "seedFilename": "seed.dat",
    "walletPswLength": 16,
    "cryptoNetwork": "testnet",  // Available values: 'bitcoin' (for Bitcoin's production blockchain), 'testnet' (for Bitcoin's test blockchain)
    "shutdownTimeout": 30000   // Time, in miliseconds, that the application should wait after it receives a terminate request before it actually terminates
  },
  // Parameters pertaining to the Startup module
  "startup": {
    "fixMissingAddresses": false, // Indicate if issued blockchain addresses are missing from BitcoinCore wallet they should be automaically included
    "bypassProcessing": false     // NOTE: this option is for DEBUG ONLY. Bypass all processing, so the app starts but does not do anything. This allows
                                  //  for debuging via 'meteor shell' or 'meteor mongo'
  },
  // Parameters pertaining to logging mechanism
  "logging": {
    "console": {
      "active": true,
      "logLevel": "INFO" // Valid options: ALL, TRACE, DEBUG, INFO, WARN, ACTION, ERROR, FATAL
    },
    "file": {
      "active": true,
      "logLevel": "DEBUG", // Valid options: ALL, TRACE, DEBUG, INFO, WARN, ACTION, ERROR, FATAL
      "logDir": "log",
      "logFilename": "catenis.log"
    },
    "email": {
      "active": true,
      "logLevel": "WARN", // Valid options: ALL, TRACE, DEBUG, INFO, WARN, ACTION, ERROR, FATAL
      "smtpHost": "localhost",
      //"secureProto": "tls",  // To be set only if a secure protocol should be used. Valid options: ssl or tls
      //"smtpPort": 587,  // To be set only if different than default (depending on secureProto): none (25), ssl (465), tls (587)
      //"username": "username", // To be set only if required by SMTP host
      //"password": "password",   // To be set only if required by SMTP host
      "toAddresses": "andre@blockchainofthings.com", // Can be set to a comma separated list of e-mail addresses
      "fromAddress": "Catenis <noreply@catenis.com>",
      "subject": "{{level}} - {{msg}}"
    }
  },
  // Parameters pertaining to BitcoinFees module
  "bitcoinFees": {
    "apiVer1Url": "https://bitcoinfees.21.co/api/v1/fees/",  // URL of version 1 of BitcoinFees API provided by 21.co
    "recommendedFeesEndPoint": "recommended",  // Endpoint of BitcoinFees API method for retrieving recommended fees
    "listFeesEndPoint": "list",  // Endpoint of BitcoinFees API method for retrieving complete list of fees
    "retrieveFeesInterval": 21600000,  // Time interval, in miliseconds, for executing method to retrieve latest bitcoin fees
    "numDbRecsToMaintain": 2000,  // Number of database docs/recs used to store latest fees that should be maintained when puging the database
    "dbPurgeHours": 2,  // Hours component of time when database purge should take place
    "dbPurgeMinutes": 0,  // Minutes component of time when database purge should take place
    "dbPurgeSeconds": 0,  // Seconds component of time when database purge should take place
    "dbPurgeInterval": 86400000  // Time interval, in miliseconds, for executing process to purge database (delete oldest fees docs/recs)
  },
  // Parameters pertaining to KeyStore module
  "keyStore": {
    "obsoleteExtKeyTimeToPurge": 345600, // Time, in seconds, before an obsolete HD extended key is purged from local key storage
    "purgeUnusedExtKeyInterval": 43200000  // Time interval, in miliseconds, for executing method to purge unused HD extended keys form local key storage
  },
  // Parameters pertaining to BitcoinCore module
  "bitcoinCore": {
    "serverHost": "catenis-btccore", // Bitcoin Core server host name/IP address
    "mainRpcPort": 8332, // Port used to connect with Bitcoin Core server via its RPC interface to interact with bitcoin's main blockchain
    "testnetRpcPort": 18332, // Port used to connect with Bitcoin Core server via its RPC interface to interact with bitcoin's testnet blockchain
    "rpcUser": "??????", // Username used to connect with Bitcoin Core server via its RPC interface
    "rpcPassword": "??????", // Password used to connect with Bitcoin Core server via its RPC interface
    "rpcConnectionTimeout": 15000,  // Timeout, in miliseconds, for RPC connection with the Bitcoin Core server
    "rescanTimeout": 7200000 // Timeout, in miniseconds, for waiting on Bitcoin Core to finish rescanning the blockchain after importing private key
  },
  // Parameters pertaining to BlockchainAddress module
  "blockchainAddress": {
    "addressValidity": {  // Time, in seconds, before which a newly issued address expires
      "systemDeviceMain": 900,
      "systemFundingPayment":  14400,
      "systemFundingChange": 900,
      "systemPayTxExpense": 900,
      "systemReadConfSpendNotify": 900,
      "systemReadConfSpendOnly": 900,
      "systemReadConfSpendNull": 900,
      "systemReadConfPayTxExpense": 900,
      "clientMessageCredit": 900,
      "clientAssetCredit": 900,
      "deviceReadConfirm": 900,
      "deviceMain": 900,
      "deviceAsset": 900,
      "deviceAssetIssuance": 900
    },
    "updateIssuedAddressesInterval": 1800000, // Time interval, in miliseconds, for executing method to update issued addresses
    "inactivedObjectTime": 345600,  // Time, in seconds, from the time when instantiated object has been last accessed before it is considered inactive
    "deleteInactiveObjectsInterval": 43200000 // Time interval, in miliseconds, for executing method to delete inactive objects
  },
  // Parameters pertaining to FundSource module
  "fundSource": {
    "maxAncestorsCount": 25, // Maximum count of (unconfirmed) ancestor txs for tx to be accepted into mempool (to be relayed)
    "maxAncestorsSize": 101000,  // Maximum total size (in bytes) of (unconfirmed) ancestor txs for tx to be accepted into mempool (to be relayed)
    "maxDescendantsCount": 25, // Maximum count of (unconfirmed) descendant txs for tx to be accepted into mempool (to be relayed)
    "maxDescendantsSize": 101000  // Maximum total size (in bytes) of (unconfirmed) descendant txs for tx to be accepted into mempool (to be relayed)
  },
  // Parameters pertaining to Service module
  "service": {
    "paymentResolution": 1000,  // Resolution of amount that should be allocated to pay for tx expenses. In other words, the allocated amount should be a multiple of the amount
    "serviceCreditAmount": 600,   // Amount, in satoshis, that should be allocated to client service credit addresses
    "serviceCreditMultiplyFactor": 10,  // Maximum number of service credit amount (serviceCreditAmount) that can be pre-allocated to a service credit address
    "minFundClientsProvision": 10,  // Number of clients that minimum fund balance should be able to provision
    "minFundDevicesProvision": 10,  // Number of devices per client that minimum fund balance should be able to provision
    "minFundMessageCreditsProvision": 100,  // Message credit amount per device that mininum fund balance should be able to provision
    "minFundAssetCreditsProvision": 100,  // Asset credit amount per device that mininum fund balance should be able to provision
    "percSendMessageCredit": 60,  // Percentage of client message credit that should be accounted for send message service
                                  //  NOTE: this value and the value below (percLogMessageCredit) must add up to 100
    "percLogMessageCredit": 40,  // Percentage of client message credit that should be accounted for log message service
                                 //  NOTE: this value and the value above (percSendMessageCredit) must add up to 100
    "systemMessageCredits": 100,  // Credits that should be considered to be pre-allocated to system to send system messages
    // NOTE: fundPayTxResolution (resolution of amount allocated to system pay tx expense addresses) is dynamically calculated
    "fundPayTxResolutionSafetyFactor": 0.5,   // Safety factor used when calculating fundPayTxResolution (from highest tx cost)
    "fundPayTxMultiplyFactor": 10,  // Maximum number of fund pay tx expense (fundPayTxResolution) that can be pre-allocated to a system pay tx expense addr
    "minFundPayTxAmountMultiplyFactor": 10,  // Multiply factor used to determine mininum amount (x fundPayTxResolution) that should be used to fund system pay tx expense addresses
    "fundPayTxSafetyFactor": 0.15,   // Safety factor used when funding and checking balance of system pay tx expense addresses
    "message": {
      "messagesPerMinute": 4,  // Number of messages sents per minute that is expected to be sustained
      "minutesToConfirm": 300,  // Time, in minutes, within which send message txs are expected to be confirmed
      "unconfMainAddrReuses": 10,  // Number of times an UTXO associated with a device main addr is expected to be reused
      "fundMainAddrAmount": 600, // Amount, in satoshis, that should be allocated to a device main addr
      "fundMainAddrMultiplyFactor": 10,  // Maximum number of fund amount (fundMainAddrAmount) that can be pre-allocated to a device main addr
      "readConfimAddrAmount": 600,  // Amount, in satoshis, that should be paid to read confirmation address output of send message tx
      "typicalTxConfig": {  // Typical transaction configuration
        "sysMessage": {     // System message transaction
          "numInputs": 3,         // Number of inputs (that spend P2PKH outputs)
          "numOutputs": 3,        // Number of (P2PKH) outputs
          "nullDataPayloadSize": 80  // Size, in bytes, of payload of null data output
        },
        "sendMessage": {        // Send message transaction
          "numInputs": 4,         // Number of inputs (that spend P2PKH outputs)
          "numOutputs": 4,        // Number of (P2PKH) outputs
          "nullDataPayloadSize": 80  // Size, in bytes, of payload of null data output
        },
        "logMessage": {        // Log message transaction
          "numInputs": 4,         // Number of inputs (that spend P2PKH outputs)
          "numOutputs": 2,        // Number of (P2PKH) outputs
          "nullDataPayloadSize": 80  // Size, in bytes, of payload of null data output
        }
      }
    },
    "readConfirmation": {
      "paymentResolution": 10,  // Resolution of amount that should be allocated to pay for read confirmation tx expenses. In other words, the allocated amount should be a multiple of the amount
      // NOTE: fundReadConfirmPayTxResolution (resolution of amount allocated to system read confirmation pay tx expense addresses) is dynamically calculated
      "fundPayTxResolutionSafetyFactor": 0,   // Safety factor used when calculating fundReadConfirmPayTxResolution (from highest tx cost)
      "fundPayTxMultiplyFactor": 10,  // Maximum number of fund read confirmation pay tx expense (fundReadConfrmPayTxResolution) that can be pre-allocated to a system read confirmation pay tx expense addr
      "minFundPayTxAmountMultiplyFactor": 100,  // Multiply factor used to determine mininum amount (x fundReadConfirmPayTxResolution) that should be used to fund system pay tx expense addresses
      "fundPayTxSafetyFactor": 0.15,   // Safety factor used when funding and checking balance of system read confirmation pay tx expense addresses
      "initNumTxInputs": 2,         // Initial number of inputs of a read confirmation transaction (1 to spend a read confirmation output, 1 to pay for tx expense)
      "initNumTxOutputs": 2,        // Initial number of outputs of a read confirmation transaction (1 to receive payment of read confirmation output spent, 1 to receive change)
      "txNullDataPayloadSize": 0,  // Size, in bytes, of payload of null data output in read confirmation transaction
      "txInputOutputGrowthRatio": 10, // Number representing how many additional inputs needs to be added to the a read confirmation tx for a new output to be added
                                      // NOTE: these additional outputs should account for read confirmation outputs spent to notify devices that belong to a different Catenis node
      "initTxFeeRate": 1,  // Amount, in satoshis/byte, for the initial fee rate for a read confirmation transaction
      "txFeeRateIncrement": 1,  // Amount, in satoshis/byte, that transaction feed rate should be incremented for the new replacement transaction
      "numReadConfirmTxsMinFundBalance": 10,  // Number of read confirmation txs the cost of which should be covered by the minimum expected balance amount of the system read confirmation pay tx expense addresses
      "terminalReadConfirmTx": {
        "minutesToConfirm": 300,  // Time, in minutes, within which terminal read confirmatino txs are expected to be confirmed
        "typicalTxConfig": {
          "numMessagesConfirmed": 2,  // Number of send message txs confirmed by terminal read confirmation transactions
          "numPayTxExpenseInputs": 2,  // Number of inputs used to pay for tx expense (fee)
          "hasChangeOutput": true, // Indicates whether tx includes an output for receiving change
          "nullDataPayloadSize": 0  // Size, in bytes, of payload of null data output
        }
      }
    },
    "asset": {
      "unlockedAssetsPerMinute": 0.33,  // Number of unlocked assets issued per minute that is expected to be sustained
      "minutesToConfirm": 30,  // Time, in minutes, within which asset txs are expected to be confirmed
      "unconfAssetIssueAddrReuses": 10,  // Number of times an UTXO associated with a device asset issuance addr is expected to be reused
      "fundAssetIssueAddrAmount": 600, // Amount, in stoshis, that should be allocated to a device asset issuance addr
      "fundAssetIssueAddrMultiplyFactor": 10,  // Maximum number of fund amount (fundAssetIssueAddrAmount) that can be pre-allocated to a device asset issuance addr
      "txWeights": {  // Weight apply to each asset tx type for calculating average cost of asset service
        "issueLockedAsset": 1,    // Issue locked asset tx weight
        "issueUnlockedAsset": 1,  // Issue unlocked asset tx weight
        "transferAsset": 100      // Transfer asset tx weight
      },
      "typicalTxConfig": {  // Typical transaction configuration
        "issueLockedAsset": {   // Issue unlocked asset
          "numInputs": 3,           // Number of inputs (that spend P2PKH outputs)
          "numOutputs": 2,          // Number of (P2PKH) outputs
          "nullDataPayloadSize": 65    // Size, in bytes, of payload of null data output
        },
        "issueUnlockedAsset": {   // Issue unlocked asset
          "numInputs": 4,           // Number of inputs (that spend P2PKH outputs)
          "numOutputs": 4,          // Number of (P2PKH) outputs
          "nullDataPayloadSize": 65    // Size, in bytes, of payload of null data output
        },
        "transferAsset": {   // Issue unlocked asset
          "numInputs": 4,           // Number of inputs (that spend P2PKH outputs)
          "numOutputs": 3,          // Number of (P2PKH) outputs
          "nullDataPayloadSize": 8     // Size, in bytes, of payload of null data output
        }
      }
    }
  },
  // Parameters pertaining to BalanceInfo module
  "balanceInfo": {
    "defaultSafetyFactor": 0.1     // Safety factor used to check whether current balance is enough to cover current expect balance
  },
  // Parameters partaining to Client module
  "client": {
    // NOTE: the following should be interpreted as a single entry with an object value
    "deviceDefaultRightsByEvent": {   // Default permission right settings for newly created devices to be assigned to clients: there must be one entry for each defined permission event
      "receive-notify-new-msg": {
        "system": "deny",
        "client": {
          "allow": "self"
        },
        "device": {
          "allow": "self"
        }
      },
      "receive-notify-msg-read": {
        "system": "deny",
        "client": {
          "allow": "self"
        },
        "device": {
          "deny": "self"
        }
      },
      "send-read-msg-confirm": {
        "system": "deny",
        "client": {
          "allow": "self"
        },
        "device": {
          "deny": "self"
        }
      },
      "receive-msg": {
        "system": "deny",
        "client": {
          "allow": "self"
        },
        "device": {
          "allow": "self"
        }
      },
      "disclose-main-props": {
        "system": "deny",
        "client": {
          "allow": "self"
        },
        "device": {
          "allow": "self"
        }
      },
      "disclose-identity-info": {
        "system": "deny",
        "client": {
          "allow": "self"
        },
        "device": {
          "allow": "self"
        }
      }
    }
  },
  // Parameters pertaining to Device module
  "device": {
    "creditsToSendMessage": 1,  // Number of client service credits that is required for a device to send a message
    "creditsToLogMessage": 1    // Number of client service credits that is required for a device to send a message
  },
  // Parameters pertaining to Transaction module
  "transaction": {
    "txOutputDustAmount": 600,  // Minimum amount that should be allocated to a transaction output
    "txInputSize": 148, // Size, in bytes, of typical transaction input (spending a P2PKH UTXO)
                        //  NOTE 1: IMPORTANT - this is an everage size for such inputs. The actual size can vary from 147 up to 149 (in other workds, the actual size is 148 +/- 1)
                        //  NOTE 2: this value should be reviewed for segwit transactions
    "txOutputSize": 34, // Size, in bytes, of a typical (P2PKH) transaction output
                       //  NOTE: this value should be reviewed for segwit transactions
    "maxTxSize": 100000  // Maximum size, in bytes, of a transaction that is considered valid
                         //  NOTE: this value should be reviewed for segwit transactions
  },
  // Parameters pertaining to TransactionMonitor module
  "transactionMonitor": {
    "blockchainPollingInterval": 15000, // Time interval, in miliseconds, for polling the blockchain for newly arrived transactions and blocks
    "mempoolExpiryHours": 336,  // Time, in hours, after which transactions are evicted from Bitcoin Core' mempool
    "purgeFoundNewCtnTxsInterval": 3600000,  // Time interval, in miliseconds, for executing method to purge transactions from list of found new Catenis transactions
    "limitTxConfirmTime": 60,  // Time, in minutes, after which it is expected for any Catenis issued transaction to have already been confirmed
    "checkOldUnconfTxsInterval": 1800000,  // Time interval, in miliseconds, for checking if there are old transactions that have not yet been confirmed
    "newTxsBatchProcDoneTimeout": 60000  // Timeout, in miliseconds, for waiting for a given new transactions batch to finish processing
  },
  // Parameters pertaining to CatenisMessage module
  "catenisMessage": {
    "nullDataMaxSize": 80,  // Maximum size, in bytes, of data that fits in null data output
    "defaultStorageProvider": "ipfs",
    "msgStorage": {
      "ipfs": {
        "apiHost": "catenis-ipfs",
        "apiPort": 5001,
        "apiProtocol": "http"
      }
    }
  },
  // Parameters pertaining to Message module
  "message": {
    "maxQueryCount": 500  // Maximum number of messages entries that can be returned when querying for messages
  },
  // Parameters pertaining to ReadConfirmation module
  "readConfirmation": {
    "unconfirmedTxTimeout": 10080,  // Timeout, in minutes, for waiting for latest read confirmation tx to be confirmed (set to 7 days, which is half the default mempool tx eviction time of 14 days)
    "txSizeThresholdRatio": 0.5  // Ratio that should be applied to maximum tx size to calculate theshold for read confirmation tx size. Above that size the tx fee rate should be reset so that is is confirmed as soon as possible
  },
  // Parameters pertaining to RestApi module
  "restApi": {
    "rootPath": "api"
  },
  // Parameters pertaining to Authentication module
  "authentication": {
    "httpRequestSignature": {
      "signVersionId": "CTN1",
      "signMethodId": "CTN1-HMAC-SHA256",
      "scopeRequest": "ctn1_request",
      "timestampHdr": "x-bcot-timestamp",
      "allowedTimestampOffset": 300,   // Time, in seconds, representing the allowed variation (+/-) of timestamp in regards to current time
                                       //  for request to be considered valid
      "authRegexPattern": "^<signMethodId> +(?:C|c)redential *= *(\\w{20})/(\\d{8})/<scopeRequest> *, *(?:S|s)ignature *= *([0-9a-fA-F]{64}) *$",
      "signValidDays": 7  // Number of days from specified signature date after which signature is not considered valid anymore
    }
  },
  // Parameters pertaining to NotifyMsgDispatcher module
  "notification": {
    "notifyRootPath": "notify"  // Root path to be used for all notification message dispatcher based on the HTTP protocol.
                                //  NOTE: the Rest API root path (see restApi section above) shall be prepended to this path to form the fully qualified notification root path
  },
  // Parameters pertaining to WebSocketNotifyMsgDispatcher module
  "webSocketNotifyMsgDispatcher": {
    "wsNotifyRootPath": "ws",  // Root of all paths to be used as endpoints for establishing WebSocket connections for this notification message dispatcher.
                               //  NOTE: the fully qualified notification root path (see notification section above) shall be prepended to this path to form the qualified base URI path for this dispatcher
    "notifyWsSubprotocol": "notify.catenis.io",  // Name of WebSocket subprotocol to be used for dispatching notification messages
                                                 //  NOTE: it's a proprietatry protocol that just sends the notification messages straight to the connected client as long as there is an open connection for the given notification event.
                                                 //    Thus the client needs to open one WebSocket connection for each notification event for which it wishes to receive notifications. There shall be an enpoint URI for each notification event
    "heartbeatInterval": 30000,  // Time interval, in miliseconds, for sending heartbeat ping package to client
    "authMsgTimeout": 5000   // Timeout, in miliseconds, for waiting on first message from client used to authenticate itself with the system
  }
}