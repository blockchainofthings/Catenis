// Config file with specific settings for production environment
{
  // Parameters pertaining to the Catenis application
  "application": {
    ctnNode: {  // Catenis node to which this instance of the application corresponds
      pubKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDO9sMMj/gwfPAJHYh9WLV2zVmzH2+vghKx5qzdknCZcuCvWGZ9IQRXbt5YZZNZyDhad13UVxQkkM8fYjGnUoyg/P3z1rK9ZOSCxnmM5oae7883QeBWjNsfVL2/zBwSmE7aU+piQQsh74gQ+ItJ1w9RyqBaQH1tJBm6rIHU7oebNgyqOcEHDZ+EVG4TiuI1ueTvkcQ07d6QFD7HTYElq+zAtWt1LuP+cwRFHiFR5gLAIWsyfl9n9v+MzAU+bGt/TMH/Ftav8mc2QL4Lo8dAx4v19ReirO78azvj2JDcbxjgIbqZURkKa6GESKBzFgXYScgqEFiYjVN3WLjdJGyVO4y9"
    },
    "cryptoNetwork": "bitcoin",  // Available values: 'bitcoin' (for Bitcoin's production blockchain), 'testnet' (for Bitcoin's test blockchain)
    "shutdownTimeout": 30000   // (30 sec.) Time, in milliseconds, that the application should wait after it receives a terminate request before it actually terminates
  },
  // Parameters pertaining to the SetUpCipherFunctions module
  setUpCipherFunctions: {
    cipherProbe: {
      hash: "icKJsu8vGaofQlFHOkmlqMnf8z2VQWFL9GOEJZm91nA="  // Base64 encoded, SHA256 hash of deciphered text
    }
  },
  // Parameters pertaining to the Startup module
  "startup": {
    "fixMissingAddresses": false, // Indicate if issued blockchain addresses are missing from BitcoinCore wallet they should be automatically included
    "bypassProcessing": false     // NOTE: this option is for DEBUG ONLY. Bypass all processing, so the app starts but does not do anything. This allows
                                  //  for debugging via 'meteor shell' or 'meteor mongo'
  },
  // Parameters pertaining to e-mail server configuration
  "email": {
    "smtpHost": "smtp-pulse.com",
    "secureProto": "tls",  // (optional, can be set to null) Secure protocol that should be used with SMTP server. Valid options: 'ssl' or 'tls'
    "smtpPort": null,  // (optional, can be set to null) To be set only if different than default (depending on secureProto): none/null (25), ssl (465), tls (587)
    "username": "???????",  // (optional, can be set to null) To be set only if required by SMTP host
    "password": "???????"  // (optional, can be set to null) Base64 encoded, ciphered password to access the SMTP host (if required)
  },
  // Parameters pertaining to logging mechanism
  "logging": {
    "exitOnError": true,
    "console": {
      "active": true,
      "logLevel": "INFO"
    },
    "file": {
      "active": true,
      "logLevel": "INFO"
    },
    "email": {
      "active": true,
      "logLevel": "WARN",
      "toAddresses": "claudio@blockchainofthings.com, andre@blockchainofthings.com", // Can be set to a comma separated list of e-mail addresses
      "fromAddress": "Catenis <noreply@blockchainofthings.com>"
    }
  },
  // Parameters pertaining to Database module
  "database": {
    "defaultBcotProducts": [{
      "sku": "CTN-0010BCOT",
      "amount": 1000000000
    }, {
      "sku": "CTN-0020BCOT",
      "amount": 2000000000
    }, {
      "sku": "CTN-0050BCOT",
      "amount": 5000000000
    }, {
      "sku": "CTN-0100BCOT",
      "amount": 10000000000
    }, {
      "sku": "CTN-0500BCOT",
      "amount": 50000000000
    }, {
      "sku": "CTN-1000BCOT",
      "amount": 100000000000
    }]
  },
  // Parameters pertaining do BitcoinFees module
  bitcoinFees: {
    implementationInUse: 'earnBitcoinFees'  // Name of bitcoin fees implementation that should be used. Available values: 'earnBitcoinFees', 'bitcoinCoreFees'
  },
  // Parameters pertaining to EarnBitcoinFees module
  "earnBitcoinFees": {
    "retrieveFeesInterval": 900000,  // (15 min) Time interval, in milliseconds, for executing method to retrieve latest bitcoin fees
    "numDbRecsToMaintain": 2000,  // Number of database docs/recs used to store latest fees that should be maintained when purging the database
    "dbPurgeHours": 2,  // Hours component of time when database purge should take place
    "dbPurgeMinutes": 0,  // Minutes component of time when database purge should take place
    "dbPurgeSeconds": 0,  // Seconds component of time when database purge should take place
    "dbPurgeInterval": 86400000  // (24 hours) Time interval, in milliseconds, for executing process to purge database (delete oldest fees docs/recs)
  },
  // Parameters pertaining to BitcoinTicker module
  bitcoinTicker: {
    mainImplementation: 'bitcoinAverage',  // Name of bitcoin ticker implementation that should be normally used over the others (the backup ones)
    minCheckRevertMainInstanceTimeout: 1800000,  // (30 min.) Minimum time, in milliseconds, to wait before trying to revert back to using main bitcoin ticker implementation instance
    maxCheckRevertMainInstanceTimeout: 86400000  // (24 hours) Minimum time, in milliseconds, to wait before trying to revert back to using main bitcoin ticker implementation instance
  },
  // Parameters pertaining to BitcoinAverageBitcoinTicker module
  bitcoinAverageBitcoinTicker: {
    localAddress: null,  // (optional, can be set to null) IP address of local network interface to use to issue requests to the Web service
    timeout: 20000  // (20 sec.) Timeout, in milliseconds, for connection/request with API server
  },
  // Parameters pertaining to GeminiBitcoinTicker module
  geminiBitcoinTicker: {
    localAddress: null,  // (optional, can be set to null) IP address of local network interface to use to issue requests to the Web service
    timeout: 20000  // (20 sec.) Timeout, in milliseconds, for connection/request with API server
  },
  // Parameters pertaining to BitcoinPrice module
  "bitcoinPrice": {
    "updatePriceTimeInterval": 1800000  // (30 min.) Time interval, in milliseconds, for retrieving new bitcoin ticker price
  },
  // Parameters pertaining to KeyStore module
  "keyStore": {
    "obsoleteExtKeyTimeToPurge": 86400, // (24 hours) Time, in seconds, before an obsolete HD extended key is purged from local key storage
    "purgeUnusedExtKeyInterval": 43200000  // (12 hours) Time interval, in milliseconds, for executing method to purge unused HD extended keys form local key storage
  },
  // Parameters pertaining to BitcoinCore module
  "bitcoinCore": {
    "serverHost": "127.0.0.1", // Bitcoin Core server host name/IP address
    "rpcConnectionTimeout": 30000  // (30 sec.) Timeout, in milliseconds, for RPC connection with the bitcoin server.
  },
  // Parameters pertaining to OmniCore module
  "omniCore": {
    "serverHost": "127.0.0.1", // Omni Core server host name/IP address
    "mainRpcPort": 7332, // Port used to connect with Omni Core server via its RPC interface to interact with bitcoin's main blockchain
    "rpcConnectionTimeout": 30000  // (30 sec.) Timeout, in milliseconds, for RPC connection with the Omni Core server
  },
  // Parameters pertaining to IpfsClient module
  "ipfsClient": {
    "apiHost": "127.0.0.1",
    "apiPort": 9095  // Connects to IPFS Cluster node (via its HTTP proxy) instead of to IPFS node (port 5001) directly
  },
  // Parameters pertaining to IpfsClusterClient module
  "ipfsClusterClient": {
    "apiUrl": "http://localhost:9094/",  // URL of IPFS Cluster REST API
    "localAddress": null,  // (optional, can be set to null) IP address of local network interface to use to connect to the IPFS Cluster RESP API. If not specified, the default network interface is used
    "timeout": 20000  // (20 sec.) (optional, can be set to null) Timeout, in milliseconds, for connection/request with API server
  },
  // Parameters pertaining to IpfsServerMonitor module
  "ipfsServerMonitor": {
    "enabled": true,
    "ipfsCluster": {
      "inUse": true,  // Indicates whether IPFS Cluster in being used
      "numberOfPeers": 2  // Expected number of active IPFS Cluster nodes
    },
    "checkInterval": 300  // (5 min.) Time, in seconds, defining the period within which IPFS server shall be checked to make sure it is still alive
  },
  // Parameters pertaining to C3NodeClient module
  "c3NodeClient": {
    "serverHost": "127.0.0.1", // Catenis Colored Coins node server host name/IP address
    "connectionTimeout": 30000  // (30 sec.) Timeout, in milliseconds, for connection with the Colored Coins Full-Node server
  },
  // Parameters pertaining to CCMetadata module
  "ccMetadata": {
    "ctnAssetsLogoUrl": "https://catenis.io/logo/Catenis_small.png",  // URL to image file to be used as the logo image for all assets generated by Catenis
    "ctnAssetsLargeLogoUrl": "https://catenis.io/logo/Catenis_large.png", // URL to image file to be used as the large logo image for all assets generated by Catenis
    "signingCertificateFilePath": "/etc/letsencrypt/live/catenis.io/cert.pem",  // Path to file (in PEM format) containing Blockchain of Things' owned SSL certificate used to sign message for asset verification
    "signingCertificateKeyFilePath": "/etc/letsencrypt/live/catenis.io/privkey.pem",  // Path to file containing key of SSL certificate used to sign message for asset verification
    "urlContentTimeout": 15000  // (15 sec.) Timeout, in milliseconds, for retrieving content associated with a given URL
  },
  // Parameters pertaining to BcotToken module
  "bcotToken": {
    "bcotOmniPropertyId": 356  // BCOT token Omni property ID
  },
  // Parameters pertaining to BcotUsageReportUI module
  "bcotUsageReportUI": {
    "defaultTimeZone": "US/EST"  // (UTC-05:00) Note: this should match the time zone setting in the BCOT Token app
  },
  // Parameters pertaining to OffChainMessagesSettlement module
  offChainMessagesSettlement: {
    refTimeZone: "UTC-05:00",  // Reference time zone expressed as a time difference from UTC (in the UTC+/-HH:mm format)
    startTime: "00:00:00",  // Time of day (formatted as HH[:mm[:ss[.SSS]]]), in reference to reference time zone, when settlement cycles should start
    cyclesPerDay: 4,  // Number of settlement cycles in a day (24 hour period). Note that a value less than one can be used to designate a period
                      //  (time between cycles) greater than 24 hours. In that case, the period shall be rounded to the nearest full hour
    maxCyclesToPostpone: 4  // Maximum settlement cycles that can be postponed before a settle off-chain messages transaction is sent when there not enough off-chain messages to pay for tx cost
  },
  // Parameters pertaining to reCaptcha module
  reCaptcha: {
    siteKey: '6LdrKbQZAAAAAOySIun207M9zUjoKFJiNjVCoabk'  // (Public) Site key assigned to the Google reCAPTCHA account in use
  },
  // Parameters pertaining to EthereumClient module
  ethereumClient: {
    nodeHost: 'ws-nd-640-119-810.p2pify.com',  // Ethereum node client API hostname
    nodePath:  null,  // (optional, can be set to null) Ethereum node client API endpoint path
    nodePort: null,  // (optional, can be set to null) Ethereum node client API port. If null, the default port (8545) is used
    nodeProtocol: 'wss', // Ethereum node client API protocol. Expected values: 'http', 'https', 'ws' our 'wss'
    apiUsername: '??????',  // (optional, can be set to null) Base64 encoded, ciphered username for accessing Ethereum node client API
    apiPassword: '??????',  // (optional, can be set to null) Base64 encoded, ciphered password for accessing Ethereum node client API
    web3Settings: {
      txBlockTimeout: 25  // (number of blocks) 'transactionBlockTimeout' setting for web3.js client library (used for WebSocket connections)
    }
  },
  // Parameters pertaining to BinanceSCClient module
  binanceSCClient: {
    nodeHost: 'ws-nd-622-903-200.p2pify.com',  // Binance Smart Chain node client API hostname
    nodePath:  null,  // (optional, can be set to null) Binance Smart Chain node client API endpoint path
    nodePort: null,  // (optional, can be set to null) Binance Smart Chain node client API port. If null, the default port (8545) is used
    nodeProtocol: 'wss', // Binance Smart Chain node client API protocol. Expected values: 'http', 'https', 'ws' our 'wss'
    apiUsername: '??????',  // (optional, can be set to null) Base64 encoded, ciphered username for accessing Binance Smart Chain node client API
    apiPassword: '??????'  // (optional, can be set to null) Base64 encoded, ciphered password for accessing Binance Smart Chain node client API
  },
  // Parameters pertaining to PolygonPSClient module
  polygonPSClient: {
    nodeHost: 'ws-nd-164-278-430.p2pify.com',  // Polygon PoS Chain node client API hostname
    nodePath:  null,  // (optional, can be set to null) Polygon PoS Chain node client API endpoint path
    nodePort: null,  // (optional, can be set to null) Polygon PoS Chain node client API port. If null, the default port (8545) is used
    nodeProtocol: 'wss', // Polygon PoS Chain node client API protocol. Expected values: 'http', 'https', 'ws' our 'wss'
    apiUsername: '??????',  // (optional, can be set to null) Base64 encoded, ciphered username for accessing Polygon PoS Chain node client API
    apiPassword: '??????'  // (optional, can be set to null) Base64 encoded, ciphered password for accessing Polygon PoS Chain node client API
  }
}
